

# 构造方法
特殊作用：
	在
		obj = 类名
		
1、如何创建类
	class 类名：
		pass
		
2、创建方法
	构造方法，__init__(self,arg)
		obj = 类('a1')
	普通方法
		obj= 类('xxx')
		obj.普通方法名()
		
3、面向对象三大特性之一：封装
	class Bar:
		def __init__(self,n,a):
			self.name = n
			self.age = a
			self.xue = 'o'
	
	b1 = Bar('mi',12)
	b2 = Bar('oric',8)
	
4、适用场景：
	如果多个函数中有一些相同的参数时，转换成面向对象

class DatabaseHelper:
	def __init__(self,ip,port,username,pwd):
		self.ip = ip
		self.port = port
		self.username = username
		self.pwd =pwd
	def add(self,content):
		# 利用self中封装的用户名、密码等 连接数据
		print('content')
		# 关闭数据连接
	def update(self,content):
		# 利用self中封装的用户名、密码等 连接数据
		print('content')
		# 关闭数据连接
	def delete(self,content):
		# 利用self中封装的用户名、密码等 连接数据
		print('content')
		# 关闭数据连接
	def get(self,content):
		# 利用self中封装的用户名、密码等 连接数据
		print('content')
		# 关闭数据连接
s1 = DatabaseHelper('1.0.0.2',3306,'vk','nb')

5、面向对象三大特性之二：继承
	1.继承
		class 父类:
			pass
		class 子类(父类):
			pass
	
	2.重写
		防止执行父类中的方法
	
	3.self永远是执行该方法的调用者
	
	4.super(子类,self).父类中的方法()
	  父类名.父类中的方法()
	  
	5.python中支持多继承
		a.左侧优先
		b.一条道走到黑	
		c.同一个根时，根最后执行
		
6、面向对象三大特性之三：多态
	函数的参数需要声明类型（python不需要，java，C#，C++需要）
	python原生多态
	

====================================面向对象中级====================================

class Foo:
	def __init__(self,name):
		# 普通字段
		self.name = name
	# 普通方法
	def show(self):
		print(self.name)
obj = Foo('hu')
obj.name
obj.show()

类成员：
	# 字段
		- 普通字段，保存在对象中，执行时，只能通过对象访问
		- 静态字段，保存在类中，执行时，可以通过对象访问，也可以通过类访问
	
	# 方法
		- 普通方法，保存在类中，由对象调用 ，self-->对象
		- 静态方法，保存在类中，由类直接调用
		- 类方法，保存在类中，由类直接调用，cls-->当前类
		
	####### 应用场景
		如果对象中需要保存一些值，执行某个功能时，需要使用对象中的值 --> 普通方法
		不需要任何对象中的值 --> 静态方法
		
	# 属性、特性
		- 不伦不类
		
		
		
#####################################
									#
									#		
中国的所有省份，用面向对象表示		#
class Province:						#
	# 静态字段，属于类				#
	country = 'China'				#
									#
	def __init__(self,name):		#
		# 普通字段，属于对象		#
		self.name = name			#
									#
henan = Province("HeNan")			#
hebei = Province("HeBei")			#
									#
									#
hebei.name							#
									#
									#
#####################################

一、成员修饰符
	公有成员
	私有成员	__

二、特殊成员
	__init__	类()自动执行
	__call__	对象()  类() 自动执行
	__int__		int(对象)
	__str__		str(对象)
	
	__add__
	
	__dict__	# 讲对象中的封装的所有内容通过字典的形式返回
	__getitem__	# 切片(slice类型)或者索引
	__setitem__
	__delitem__
	
	__iter__	# 如果类中有__iter__方法，对象-->可迭代对象
				# 对象，__iter__()的返回值：迭代器
				# for 循环，迭代器,next
				# for 循环，可迭代对象，对象，__iter__方法，迭代器，next
				# 1、执行lioo对象的类ioo类的 __iter__方法，并获取其返回值
				# 2、循环上一步中返回的对象
											

三、metaclass，类的祖宗
	a.Python中一切事物皆是对象
	b.
		class Foo:
			pass
		
		obj = Foo()
		# obj是对象，Foo类
		# Foo类也是一个对象，type的对象
		
	c.
		类都是type类的对象	type(..)
		“对象“都是以类的对象 类()
	
	
四、异常处理

	raise Exception('数据库处理错误。。。')
	
五、反射
	



六、单例模式 





############################################


class Foo:
	def func(self):
		print(123)

		
============================

def function(self):
	print('1258')

Foo = type('Foo',(object,),{'func':function})
# type('Foo',(object,),{'func':lambda x:125})	声明一个类
Foo = type('Foo',(object,),{'func':lambda x:125})
obj = Foo()

声明了一个类



############################################