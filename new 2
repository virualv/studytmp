



# 构造方法
特殊作用：
	在
		obj = 类名
		
1.如何创建类
	class 类名：
		pass
		
2.创建方法
	构造方法，__init__(self,arg)
		obj = 类('a1')
	普通方法
		obj= 类('xxx')
		obj.普通方法名()
		
3.面向对象三大特性之一：封装
	class Bar:
		def __init__(self,n,a):
			self.name = n
			self.age = a
			self.xue = 'o'
	
	b1 = Bar('mi',12)
	b2 = Bar('oric',8)
	
4.适用场景：
	如果多个函数中有一些相同的参数时，转换成面向对象

class DatabaseHelper:
	def __init__(self,ip,port,username,pwd):
		self.ip = ip
		self.port = port
		self.username = username
		self.pwd =pwd
	def add(self,content):
		# 利用self中封装的用户名、密码等 连接数据
		print('content')
		# 关闭数据连接
	def update(self,content):
		# 利用self中封装的用户名、密码等 连接数据
		print('content')
		# 关闭数据连接
	def delete(self,content):
		# 利用self中封装的用户名、密码等 连接数据
		print('content')
		# 关闭数据连接
	def get(self,content):
		# 利用self中封装的用户名、密码等 连接数据
		print('content')
		# 关闭数据连接
s1 = DatabaseHelper('1.0.0.2',3306,'vk','nb')

